姓名：方勇
学校：北邮 05 


java开发工具
IntelliJ IDEA 2020.3.2 (Ultimate Edition)

java开发工具下载地址
https://www.jetbrains.com/idea/download/#section=mac

jdk版本
java version "11.0.12"

jdk版本下载地址
https://www.oracle.com/java/technologies/javase-jdk11-downloads.html

资料下载
https://github.com/fangyong2/Shanghai-Rural-Commercial-Bank-java-development-training


+---------------------------------------------------------------------------------------------------------+------------+
| 知识点                                                                                                     |掌握程度    |
+---------------------------------------------------------------------------------------------------------+------------+
| java :变量  字符串 if表达式 switch表达式 函数定义 数组 For while dowhile循环 break continue  Exception         |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+
| java :集合 collection (list set), map                                                                 |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+
| java :类  继承 封装 多态 抽象类 接口  修饰符                                                               |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+
| java :JDBC  7个步骤   Connection Statement ResultSet  单例设计模式                                           |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+
| java :IO  Writer Reader                                                                                 |了解          |
+---------------------------------------------------------------------------------------------------------+------------+
| java :线程  extends Thread implements Runnable                                                            |了解          |
+---------------------------------------------------------------------------------------------------------+------------+


+---------------------------------------------------------------------------------------------------------+------------+
| java :变量  字符串 if表达式 switch表达式 函数定义 数组 For while dowhile循环 break continue  Exception             |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+

1、变量
int i =1;
float i = 1.0
String s = "123"

2、array
    int[] scores = {1,2,3,4,5};
    for(int i : scores){
        System.out.println(i);
    }

3、if
int result = 60;
if(result>=60){
    System.out.println("ok")
}else{
    System.out.println("not ok")
}


if 多分类  A90-100 B80-90 C70-80 D60-70 E60
int result = 60;
if(result>=90){
    
}else if(result>=80){
    
}else if(result>=70){
    
}else if(result>=60){
    
}else{
    
}


4、for while do while break continue
1+2+3.。。。10=？55
int sum = 0;
for(int i=1;i<=10;i++){
    sum = sum +i;
}
System.out.print(sum);

int i=1;
int sum = 0;
while(i<=10){
    sum = sum +i;
    i++;//i = i+1
}
System.out.print(sum);

int i=1;
int sum = 0;
do{
    sum = sum +i;
    i++;//i = i+1
}while(i<=10)
System.out.print(sum);

1+2+3.。。。10=？ 奇数  7=碰瓷的
1+3+5+7+9 

1+3+5 =???
int i=1;
int sum = 0;
do{
    if(i % 2 ==0){
        continue;
    }
    if(i==7){
        break;
    }
    sum = sum +i;
    i++;//i = i+1
}while(i<=10)
System.out.print(sum);

5、函数
public static int sum(int a, int b){
        return a+b;
    }

6、Exception
----捕获异常----
try{
    
}catch(异常){
    
}finally{
    
}

----抛出异常----
throws声明抛出异常    ，public static void divide() throws Exception{}
{
1、异常来源于Java自身，例如分母不能为0. 1/0
2、异常来源于开发者自身，例如主动抛出系统异常throw new Exception()
3、异常来源于开发者自身，例如主动抛出系统异常throw new 自定义异常(继承Exception)
}

public static int division(int a,int b) {
    int c = 0;
    c = a / b;
    return c;
}

+---------------------------------------------------------------------------------------------------------+------------+
| java :集合 collection (list set), map                                                                 |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+

//数据结构
index value
0       10
1       11

value
10
11

key     value
"name": "fangyong"
"age":40

//集合list
System.out.println("list开始########################");
List list = new ArrayList();
//添加
list.add(1);
list.add(1);
list.add(1);
//修改
list.set(0,10);

//删除
list.remove(0);
//查看
for(Object value:list){
    System.out.println(value);
}

//集合set,无序 去重
System.out.println("set开始########################");
Set set = new TreeSet();
//添加
set.add(1);
set.add(1);
set.add(1);
set.add(2);
//修改

//删除
set.remove(2);
//查看
for(Object value:set){
    System.out.println(value);
}

System.out.println("map开始########################");
//map  json数据格式{"name":"方勇"，"age":40,"gender":"男"}
Map map = new HashMap();
//添加
map.put("name","方勇");
map.put("age",40);
map.put("gender","男");

//修改
map.replace("name","fang yong");
//删除
map.remove("name");
//查看
System.out.println(map.get("age"));
for(Object value:map.values()){
    System.out.println(value);
}

for(Object value:map.keySet()){
    System.out.println(value);
}

+---------------------------------------------------------------------------------------------------------+------------+
| java :类  继承 封装 多态 抽象类 接口  修饰符                                                               |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+

类 class 累 生命周期
    属性   变量
    方法   函数
    构造器  函数 只执行一次。new
    静态块static  只执行一次

对象 object
继承
重写
重载 
多态(重写 重载 继承)，同一个行为具有不同表现形式或形态的能力。。


抽象类 abstract
接口 Interface

对象比大小
//奥运类
public class Olympic implements Comparable<Olympic> {

    //国家
    private String country;
    //金牌数量
    private int jnum;
    //银牌数量
    private int ynum;
    //铜牌数量
    private int tnum;

    public Olympic() {
    }

    public Olympic(int jnum, int ynum, int tnum) {
        this.jnum = jnum;
        this.ynum = ynum;
        this.tnum = tnum;
    }
    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }
    public int getJnum() {
        return jnum;
    }

    public void setJnum(int jnum) {
        this.jnum = jnum;
    }

    public int getYnum() {
        return ynum;
    }

    public void setYnum(int ynum) {
        this.ynum = ynum;
    }

    public int getTnum() {
        return tnum;
    }

    public void setTnum(int tnum) {
        this.tnum = tnum;
    }

    //被动比较的方法，当进行排序比较时调用。
    @Override
    public int compareTo(Olympic olympic) {
        //对象比大小，只比金牌
        int result = this.jnum-olympic.jnum;
        if (result>0){
            result = 1;
        }else if(result<0){
            result = -1;
        }else {
            result = 0;
        }
        return result;

        //对象比大小，比较顺序为金牌-银牌
    }

    @Override
    public String toString() {
        //return super.toString();
        return "hsbc-->"+this.country+"-->[jnum="+this.jnum+",ynum="+this.ynum+",tnum="+this.tnum+"]";
    }
}


手机的发展历史
1、Nokia
2、Android    Apple
用面向对象的的思想完成。。
知识点
类  继承  接口

class Mobile{
    public String name="手机";

    //发短信
    public void sendMes(){
        System.out.println("发短信");
    }
    //打电话
    public void call(){
        System.out.println("打电话");
    }
}

class Nokia extends Mobile{ 
}

public interface Music {
    //听音乐
    void music();
}

public interface Move {
    //看电影
    void move();
}

class Android extends Mobile implements Music,Move{ 
}

class Apple extends Mobile implements Music,Move{   
}


访问修饰符   所在类  同一个包  其他包内子类  其他包内非子类
----------+------+--------+-----------+------------+
public    + 可以  +   可以    + 可以        +可以         +
----------+------+--------+-----------+------------+
private   + 可以   +  不可以 +   不可以   + 不可以      +
----------+------+--------+-----------+------------+
protected + 可以  +   可以  +   可以        + 不可以。     +
----------+------+--------+-----------+------------+
默认        + 可以  + 可以   +不可以      +不可以        +
----------+------+--------+-----------+------------+

+---------------------------------------------------------------------------------------------------------+------------+
| java :JDBC  7个步骤   Connection Statement ResultSet  单例设计模式                                           |熟练          |
+---------------------------------------------------------------------------------------------------------+------------+
+----------------------------------------------------+
| SQL : DDL DML DCL                                 |
+----------------------------------------------------+
| JDBC : Connection Statement ResultSet     |
+----------------------------------------------------+

create table a(aid int primary key auto_increment,aname varchar(20));
create table b(bid int primary key auto_increment,bname varchar(20),aid int );
alter table b add foreign key fk_aid(aid) references a(aid);


a aid aname

b bid bname aid

aid bid aname bname 

select a.aid,a.aname,b.bid,b.bname left join b on a.aid=b.aid

+----------------------------------------------------+
| 远程MYSQL主机配置信息                             |
+----------------------------------------------------+
|主机名或IP地址 ｜121.37.170.216                       |
+-------------+--------------------------------------+
|端口           ｜3306                                 |
+-------------+--------------------------------------+
|用户名          ｜root                                 |
+-------------+--------------------------------------+
|密码           ｜fy123456                             |
+-------------+--------------------------------------+

DDL（data definition language）数据库定义语言：
其实就是我们在创建表的时候用到的一些sql，比如说：CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构，数据类型，表之间的链接和约束等初始化工作上

CREATE TABLE 表名称
(
列名称1 数据类型,
列名称2 数据类型,
列名称3 数据类型,
....
)

DROP TABLE 表名称


use hsbc;
drop table tbl_dvd_姓名;
create table tbl_dvd_姓名
(
id int primary key auto_increment,
name varchar(20),
state int,
date int,
count int
);


DML（data manipulation language）数据操纵语言：
就是我们最经常用到的 SELECT、UPDATE、INSERT、DELETE。 主要用来对数据库的数据进行一些操作。

SELECT 列名称 FROM 表名称
UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值
INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)
DELETE FROM 表名称 WHERE 列名称 = 值

添加
use hsbc;
INSERT INTO tbl_dvd_fy (name, state,date,count) VALUES ("方勇", 1,0,1);

修改
UPDATE tbl_dvd_fy SET count = 100 WHERE name = "方勇";

删除
DELETE FROM tbl_dvd_fy WHERE name = "Ivy";

查询
use hsbc;
SELECT * FROM tbl_dvd_fy;

分页
SELECT * FROM tbl_dvd_fy limit 2;




DCL（Data Control Language）数据库控制语言：
是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。这个比较少用到。
1.COMMIT - save work done 提交 
2.SAVEPOINT - identify a point in a transaction to which you can later roll back 保存点 
3.ROLLBACK - restore database to original since the last COMMIT   回滚 



JDBC操作数据库的七个基本步骤
1、使用反射方式加载驱动器
Class.forName("com.mysql.cj.jdbc.Driver");

2、创建连接数据库对象
String url = "jdbc:mysql://localhost[127.0.0.1]:3306/表名?characterEncoding=utf-8"
String userName = "用户名"；
String passWord = "密码"；
Connection conn = DriverManage.getConnection(url,userName,PassWord)；

3、创建操作数据库对象
Statement stat = conn.createStatement() || conn.prepareStatement();

4、创建Sql语句
String sql = "select * from 表名 where 【约束条件】";
String sql = "insert into 表名 列名 = 值 where 【约束条件】";
String sql = "delete from 表名 where 【约束条件】";
String sql = "update 表名 set 列名 = 值 where 【约束条件】"

5、执行Sql语句，并创建结果集

ResultSet rs = stat.executeQuery() || stat.executeUpdate();

6、操作结果集
while(rs.next()){
    rs.getString() || rs.getInt() || rs.getDouble() || rs.getFloat || rs.getDate()
}

7、释放资源
//先创建的后释放
if(rs != null) rs.close();          //释放结果集对象
if(stat != null) stat.close();      //释放操作数据库对象
if(conn != null) conn.close();      //释放连接数据库对象


+---------------------------------------------------------------------------------------------------------+------------+
| java :IO  Writer Reader                                                                                 |了解          |
+---------------------------------------------------------------------------------------------------------+------------+
import java.io.File; // Import the File class
import java.io.FileNotFoundException; // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files
public class ReadFile {
    public static void main(String[] args) {
        Scanner myReader=null;
        try {
            File myObj = new File("filename.txt");
            myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                System.out.println(data);
            }
        }catch (FileNotFoundException e) {
            System.out.println("文件没有找到。。。。");
            e.printStackTrace();
        }catch (Exception e) {
            e.printStackTrace();
        }finally {
            myReader.close();
        }
    }
}


import java.io.File; // Import the File class
import java.io.IOException; // Import the IOException class to handle errors
public class CreateFile {
    public static void main(String[] args) {
        try {
            File myObj = new File("filename.txt");
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}